%YAML 1.2
---
# http://www.sublimetext.com/docs/3/syntax.html
# See http://www.sublimetext.com/docs/syntax.html
name: eloquence
file_extensions:
  - eq
scope: source.eq
contexts:
  main:
    # Strings begin and end with quotes, and use backslashes as an escape
    # character
    - match: '(DEF FN)([A-Z][a-z0-9_]*)(:)([A-Z][a-z0-9_]*\${0,1})'
      captures:
        1: keyword.eq
        2: storage.type.eq
        3: keyword.operator.eq
        4: entity.name.function.eq
      push:
        - match: (FNEND)
          captures:
            1: keyword.eq
          pop: true
        - include: common
    - match: '(DEF FN)([A-Z][a-z0-9_]*\${0,1})'
      captures:
        1: keyword.eq
        2: entity.name.function.eq
      push:
        - match: (FNEND)
          captures:
            1: keyword.eq
          pop: true
        - include: common
    - match: '(SUB )([A-Z][a-z0-9_]*)(:)([A-Z][a-z0-9_]*\${0,1})'
      captures:
        1: keyword.eq
        2: storage.type.eq
        3: keyword.operator.eq
        4: entity.name.function.eq
      push:
        - match: (SUBEND)
          captures:
            1: keyword.eq
          pop: true
        - include: common
    - match: "(?<!DEL )(?<!LOAD )(SUB )([A-Z][a-z0-9_]*)"
      captures:
        1: keyword.eq
        2: entity.name.function.eq
      push:
        - match: (SUBEND)
          captures:
            1: keyword.eq
          pop: true
        - include: common
    - include: common
  common:
    - match: "!.*"
      scope: comment.line.eq
    - match: '(DEF FN)([A-Z][a-z0-9]*\${0,1})(?=.*=)'
      captures:
        1: keyword.eq
        2: entity.name.function.eq
    - match: '(FNTHIS)(\.)([A-Z][a-z0-9_]*\${0,1})'
      captures:
        1: keyword.eq
        2: keyword.operator.eq
        3: entity.name.function.eq
    - match: '(FN)([A-Z][a-z0-9_]*\${0,1})'
      captures:
        1: keyword.eq
        2: entity.name.function.eq
    - match: '(CALL (?:THIS){0,1}\.)([A-Z][a-z0-9_]*)'
      captures:
        1: keyword.eq
        2: keyword.operator.eq
        3: entity.name.function.eq
    - match: "(CALL DLL |LOAD DLL |CALL )([A-Z][a-z0-9_]*)"
      captures:
        1: keyword.eq
        2: entity.name.function.eq
    - match: (DATA )
      captures:
        1: keyword.eq
      push:
        - match: $
          pop: true
        - match: ","
          scope: keyword.operator.eq
        - match: '"'
          push:
            - meta_scope: string.quoted.double.eq
            - match: '"'
              pop: true
        - match: '[^,\n]+'
          scope: string.eq
    - match: \b(COM|DIM|INTEGER|DINTEGER|REAL|FLOAT|SHORT)\b
      scope: storage.type.eq
    - match: "(GOTO |THEN |GOSUB )([A-Z][a-z0-9_]*)(?=,)"
      captures:
        1: keyword.eq
        2: entity.name.section.eq
      push:
        - match: $
          pop: true
        - match: "(,)([A-Z][a-z0-9_]*)"
          captures:
            1: keyword.operator.eq
            2: entity.name.section.eq
    - match: "^[A-Z][a-z0-9_]*(?=:)"
      scope: entity.name.section.eq
    - match: \b(DESCRIPTION|IN DATA SET|NO OPERATOR|OPTION BASE|TRANSPARENT|BACKGROUND|DBROLLBACK|DUMP STACK|EXCLUSIVE|POPUP BOX|PREDICATE|RANDOMIZE|REVISION\$|DBCOMMIT|DBDELETE|DBUNLOCK|DBUPDATE|LASTLINE|MAPPNTR\$|READONLY|STANDARD|WORKFILE|CHANGES|COMMAND|DBBEGIN|DBCLOSE|ERRMSG\$|EXTENDS|FCREATE|GETENV\$|LDSPEC\$|MAPVOL\$|PACKFMT|PRINTER|RELEASE|REQUEST|RESTORE|SUBEXIT|TRAILER|TYPEOF\$|XASSIGN|XUNPACK|ACCEPT|APPEND|ASSIGN|BINCMP|BINIOR|CREATE|CURKEY|CURSOR|DBFIND|DBINFO|DBLOCK|DBOPEN|DEFINE|DETAIL|DROUND|ENABLE|EXPORT|HEADER|LENGTH|LINPUT|NUMLINE|NUMERIC|NUMREC|PROUND|REMOTE|REPEAT|REPORT|RETURN|RIGHT\$|ROTATE|SELECT|SIGNAL|STDERR|STDOUT|STRUCT|SYSID\$|SYSTEM|TASKID|THREAD|TOTALS|UNPACK|UPDATE|XPURGE|BEGIN|BREAK|CLOCK|DATE\$|DBASE|DBGET|DBPUT|ERRM\$|ERROR|FIXED|FRACT|GRAND|IMAGE|LABEL|LDISP|LINES|LISTS|MERGE|PAUSE|PRINT|PURGE|REDIM|SHIFT|SLEEP|TIME\$|TOTAL|TRIM\$|UNTIL|USING|USRID|WFLEN|WHILE|WIDTH|XPACK|BEEP|CALL|CASE|CHR\$|DATA|DISP|DRAW|EDIT|ELSE|ERRL|ERRN|EXIT|FIND|FREE|FROM|GRAD|HOLE|LINE|LIST|LOAD|LOOP|LWC\$|MD5\$|NEXT|OTHR|PACK|PAGE|PNTR|PPID|READ|RPT\$|SCAN|SIZE|SORT|STEP|STOP|SYNC|THEN|THIS|TYPE|UPC\$|VAL\$|WAIT|WHEN|WITH|YPOS|ABS|ACS|ALL|ASN|ATN|COL|CON|COS|DEG|DEL|DELAY|DIV|DLG|DLL|END|EXP|FOR|FORM|GET|INT|KEY|LEN|LET|LEX|LGT|LIN|LOG|MAT|MAX|MIN|MOD|NEW|NUM|OFF|PID|POS|RAD|RND|ROW|SET|SGN|SIN|SKP|SQR|SUB|TAN|USE|VAL|ZER|AS|BY|DO|IF|IS|ON|PI|TO|HALT)
      scope: keyword.eq
    - match: '"'
      push:
        - meta_scope: string.quoted.double.eq
        - match: '"'
          pop: true
    - match: '\d+(\.\d+){0,1}(E\d+){0,1}'
      scope: constant.numeric.eq
    - match: '\+|-|/|\*|=|\[|\]|;|,|>|<|\(|\)|&|\.|:|\^'
      scope: keyword.operator.eq
    - match: BINAND|NOT|OR|AND|XOR|EXOR
      scope: keyword.operator.eq
    - match: '[A-Z][a-z0-9_]*(?![A-Z])\${0,1}'
      scope: variable.eq
    - match: REM.*$
      scope: comment.line.eq
    - match: "(THEN GOTO |GOTO |THEN |GOSUB |USING REMOTE LISTS |USING )([A-Z][a-z0-9_]*)(?![A-Z]])"
      captures:
        1: keyword.eq
        2: entity.name.section.eq
